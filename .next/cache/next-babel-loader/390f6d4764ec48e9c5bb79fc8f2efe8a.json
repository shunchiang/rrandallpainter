{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { createStore } from \"redux\";\nimport { createWrapper, HYDRATE } from \"next-redux-wrapper\";\n\n// create your reducer\nconst reducer = (state = {\n  tick: \"init\"\n}, action) => {\n  switch (action.type) {\n    case HYDRATE:\n      // Attention! This will overwrite client state! Real apps should use proper reconciliation.\n      return _objectSpread(_objectSpread({}, state), action.payload);\n\n    case \"TICK\":\n      return _objectSpread(_objectSpread({}, state), {}, {\n        tick: action.payload\n      });\n\n    default:\n      return state;\n  }\n};\n\nconst makeStore = context => createStore(reducer);\n\nexport const wrapper = createWrapper(makeStore, {\n  debug: true\n});","map":{"version":3,"sources":["/Users/shunchiang/Documents/projects/rrandall/Redux/index.ts"],"names":["createStore","createWrapper","HYDRATE","reducer","state","tick","action","type","payload","makeStore","context","wrapper","debug"],"mappings":";;;;;;AAAA,SAASA,WAAT,QAAuC,OAAvC;AACA,SAAoBC,aAApB,EAA4CC,OAA5C,QAA2D,oBAA3D;;AAMA;AACA,MAAMC,OAAO,GAAG,CAACC,KAAY,GAAG;AAAEC,EAAAA,IAAI,EAAE;AAAR,CAAhB,EAAkCC,MAAlC,KAAwD;AACtE,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKL,OAAL;AACE;AACA,6CAAYE,KAAZ,GAAsBE,MAAM,CAACE,OAA7B;;AACF,SAAK,MAAL;AACE,6CAAYJ,KAAZ;AAAmBC,QAAAA,IAAI,EAAEC,MAAM,CAACE;AAAhC;;AACF;AACE,aAAOJ,KAAP;AAPJ;AASD,CAVD;;AAYA,MAAMK,SAA2B,GAAIC,OAAD,IAAsBV,WAAW,CAACG,OAAD,CAArE;;AAEA,OAAO,MAAMQ,OAAO,GAAGV,aAAa,CAAQQ,SAAR,EAAmB;AAAEG,EAAAA,KAAK,EAAE;AAAT,CAAnB,CAA7B","sourcesContent":["import { createStore, AnyAction } from \"redux\";\nimport { MakeStore, createWrapper, Context, HYDRATE } from \"next-redux-wrapper\";\n\nexport interface State {\n  tick: string;\n}\n\n// create your reducer\nconst reducer = (state: State = { tick: \"init\" }, action: AnyAction) => {\n  switch (action.type) {\n    case HYDRATE:\n      // Attention! This will overwrite client state! Real apps should use proper reconciliation.\n      return { ...state, ...action.payload };\n    case \"TICK\":\n      return { ...state, tick: action.payload };\n    default:\n      return state;\n  }\n};\n\nconst makeStore: MakeStore<State> = (context: Context) => createStore(reducer);\n\nexport const wrapper = createWrapper<State>(makeStore, { debug: true });\n"]},"metadata":{},"sourceType":"module"}